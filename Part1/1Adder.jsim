.include "nominal.jsim"
.include "stdcell.jsim"
.include "2dcheckoff_3ns.jsim"

* basic FA
* S = A xor B xor Cin
* Co = (A + B)Cin + AB
.subckt FA a b cin s co
Xs1 a b s1 xor
Xs2 s1 cin s xor
Xc1 a b co1 nand2
Xc2 a cin co2 nand2
Xc3 b cin co3 nand2
Xc4 co1 co2 co3 co nand3
.ends

* make and with nand and inv
.subckt and a b z
Xzinv a b zinv nand2
Xz zinv z inverter
.ends

* faster xor with nands
.subckt xor a b z
X1 a b m nand2
X2 a m c nand2
X3 m b d nand2
X4 c d z nand2
.ends

* faster OR with nor and inv
.subckt or a b z
Xnor a b c nor2
Xinv c z inverter
.ends


* Single carry generate and carry propagate
* This will be used in the kogge-stone adder (KSA)

* G_i = A_i * B_i
* P_i = A_i xor B_i

*UPDATE: upgraded PG to take in ALUFN0 input for subtraction

.subckt PG a b ALUFN0 g p
Xsubcheck b ALUFN0 b2 xor
Xp a b2 p xor
Xg a b2 g and
.ends


* 1bit CLA
.subckt CLA1 a b cin g p s
Xs2 cin p s xor
Xgp a b g p PG
.ends


* this is for KSA, do refer to that diagram from the wikipedia page
* group propagate and generate
* G = Gi OR (Pi and Giprev)
* P = Pi AND Piprev
.subckt KSPG ph gh pl gl pout gout
Xpo ph pl pout and
Xgo1 ph gl phgl and
Xgo2 phgl gh gout or
.ends


* also for KSA, this is group generate, almost same as KSPG,
* except it is just group generate only.
* G = Gi OR (Pi and Giprev)
.subckt KSG ph gh gl gout
Xgo1 ph gl phgl and
Xgo2 phgl gh gout or
.ends


* for KSA, finds the sum Si
* Si = Pi XOR Ciprev
.subckt KSS ph cl s
Xs ph cl s xor
.ends


*testing 4 bit connection
.subckt 4bKSA a[3:0] b[3:0] cin s[3:0] co
XPG0 a[3:0] b[3:0] g0[3:0] p0[3:0] PG
.ends




*Hello, this file should be up to date.

* Trying for 32-bit KSA (does not take into account the ALUFN0, z, v or n)
* assume carry in is 0
.subckt adder32 ALUFN[0] a[31:0] b[31:0] s[31:0] z v n

* all the PGs
Xbuff_ALUFN0 ALUFN[0] bALUFN[0] buffer_8
XPG a[31:0] b[31:0] bALUFN[0]#32 g0[31:0] p0[31:0] PG


* first layer:
XKSPG1 p0[31:1] g0[31:1] p0[30:0] g0[30:0] p1[31:1] g1[31:1] KSPG
XKSG1_0 p00 g00 bALUFN[0] c0 KSG


* second layer: 
XKSPG2 p1[31:3] g1[31:3] p1[29:1] g1[29:1] p2[31:3] g2[31:3] KSPG
XKSG2 p12 g12 c0 c2 KSG
XKSG2_0 p11 g11 bALUFN[0] c1 KSG


* third layer:
XKSPG3 p2[31:7] g2[31:7] p2[27:3] g2[27:3] p3[31:7] g3[31:7] KSPG
XKSG3 p2[6:4] g2[6:4] c[2:0] c[6:4] KSG
XKSG3_0 p23 g23 bALUFN[0] c3 KSG


* fourth layer:
XKSPG4 p3[31:15] g3[31:15] p3[23:7] g3[23:7] p4[31:15] g4[31:15] KSPG
XKSG4 p3[14:8] g3[14:8] c[6:0] c[14:8] KSG
XKSG4_0 p37 g37 bALUFN[0] c7 KSG


* fifth layer:
XKSPG5 p431 g431 p423 g423 p531 g531 KSPG
XKSG5 p4[30:16] g4[30:16] c[14:0] c[30:16] KSG
XKSG5_0 p415 g415 bALUFN[0] c15 KSG


* sixth layer: 
* not sure if i have to implement this. This is for carry out.
XKSG6_0 p531 g531 bALUFN[0] cout KSG


* all the KSS to calculate the sum bits. Last layer.
Xsum0 p00 bALUFN[0] s0 KSS 
Xsum1to31 p0[31:1] c[30:0] s[31:1] KSS



*calculate z
X16ors s[31:16] s[15:0] out8[15:0] nor2
X8ors out8[15:8] out8[7:0] out4[7:0] nand2
X4ors out4[7:4] out4[3:0] out2[3:0] nor2
X2ors out2[3:2] out2[1:0] out[1:0] nand2
Xorf out1 out0 z nor2


*calculate v
XB_ALUFN0 bALUFN[0] b31 xb31 xor
Xnots31 s31 nots31 inverter
Xnotxb31 xb31 notxb31 inverter
Xnota31 a31 nota31 inverter
Xnegnegpos a31 xb31 nots31 negnegpos and3
Xposposneg nota31 notxb31 s31 posposneg and3
Xv_unit posposneg negnegpos v or2


*calculate n
Xbuff s31 n buffer
.ends



